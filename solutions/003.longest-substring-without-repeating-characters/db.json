{"java":"public class Solution {\r\n    public int lengthOfLongestSubstring(String s) {\r\n      if(s==null)\r\n        return 0;\r\n      boolean[] flag = new boolean[256];\r\n     \r\n      int result = 0;\r\n      int start = 0;\r\n      char[] arr = s.toCharArray();\r\n     \r\n      for (int i = 0; i < arr.length; i++) {\r\n        char current = arr[i];\r\n        if (flag[current]) {\r\n          result = Math.max(result, i - start);\r\n          // the loop update the new start point\r\n          // and reset flag array\r\n          // for example, abccab, when it comes to 2nd c,\r\n          // it update start from 0 to 3, reset flag for a,b\r\n          for (int k = start; k < i; k++) {\r\n            if (arr[k] == current) {\r\n              start = k + 1; \r\n              break;\r\n            }\r\n            flag[arr[k]] = false;\r\n          }\r\n        } else {\r\n          flag[current] = true;\r\n        }\r\n      }\r\n     \r\n      result = Math.max(arr.length - start, result);\r\n     \r\n      return result;\r\n    }\r\n}","ruby":"# @param {String} s\r\n# @return {Integer}\r\ndef length_of_longest_substring(s)\r\n  hash = Hash.new\r\n  max=0\r\n  prev_dup = 0\r\n  is_dup = false\r\n  s.each_char.with_index do |c ,idx|\r\n    if hash.has_key?(c)\r\n      is_dup=true\r\n      if (idx - prev_dup)  > max\r\n        max = idx-prev_dup\r\n      end\r\n      #puts \"Key #{c} is at #{hash[c]}\"\r\n      tmp = hash[c]\r\n      #puts \"Delete: from #{prev_dup} to #{hash[c]-prev_dup+1} #{s[prev_dup, hash[c]-prev_dup+1]}\"\r\n      s[prev_dup, hash[c]-prev_dup+1].each_char do |c|\r\n        hash.delete(c)\r\n      end\r\n      prev_dup = tmp+1\r\n    else\r\n      #puts \"#{c} does not exist.\"\r\n    end\r\n\r\n    hash[c]=idx\r\n  end\r\n\r\n  if s.length - prev_dup > max\r\n    max = s.length - prev_dup\r\n  end\r\n\r\n  if !is_dup\r\n    max = s.length\r\n  end\r\n  return max\r\nend"}
{"ruby":"# Definition for a binary tree node.\r\n# class TreeNode\r\n#     attr_accessor :val, :left, :right\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @left, @right = nil, nil\r\n#     end\r\n# end\r\n\r\n# @param {TreeNode} root\r\n# @return {Integer[]}\r\ndef preorder_traversal(root)\r\n    path = []\r\n    \r\n    return path if root.nil?\r\n    \r\n    s = []\r\n    s.push(root)\r\n    \r\n    while !s.empty?\r\n        r = s.pop()\r\n        path.push r.val\r\n        \r\n        s.push r.right unless r.right.nil?\r\n        s.push r.left unless r.left.nil?\r\n    end\r\n    path\r\nend","python":"from collections import deque\nclass Solution:\n    def preorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        ans = []\n        q = deque()\n        if root == None:\n            return []\n        \n        q.append(root)\n\n        while q:\n            node = q.popleft()\n            ans.append(node.val)\n\n            if node.left != None:\n                ans += self.preorderTraversal(node.left)\n            \n            if node.right != None:\n                ans += self.preorderTraversal(node.right)\n\n        return ans"}
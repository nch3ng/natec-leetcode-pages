{"ruby":"# Definition for a binary tree node.\r\n# class TreeNode\r\n#     attr_accessor :val, :left, :right\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @left, @right = nil, nil\r\n#     end\r\n# end\r\n\r\n# @param {TreeNode} root\r\n# @return {String[]}\r\ndef binary_tree_paths(root)\r\n  return [] if root.nil?\r\n  parent_path = Hash.new\r\n  s=[];\r\n  paths=[];\r\n  \r\n  s.push(root)\r\n  \r\n  until s.empty?\r\n\r\n    r=s.pop();\r\n    #puts r.val\r\n    #puts ''\r\n    p=''\r\n    if parent_path[r].nil?\r\n      p = r.val.to_s\r\n    else\r\n      #puts parent_path[r]\r\n      #puts r.val\r\n      p = \"#{parent_path[r]}->#{r.val}\"\r\n    end\r\n    \r\n    #puts p\r\n    \r\n    if r.left.nil? && r.right.nil?\r\n      #puts 'Its leafnode'\r\n      paths.push(p)\r\n    end\r\n    \r\n    if !r.right.nil?\r\n      s.push(r.right)\r\n      parent_path[r.right]=p.to_s\r\n    end\r\n\r\n    if !r.left.nil?\r\n      s.push(r.left)\r\n      parent_path[r.left]=p.to_s\r\n    end\r\n  end\r\n  paths\r\nend"}
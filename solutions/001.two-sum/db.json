{"java":"public class Solution {\r\n    public int[] twoSum(int[] nums, int target) {\r\n        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();\r\n    \tint[] result = new int[2];\r\n     \r\n    \tfor (int i = 0; i < nums.length; i++) {\r\n    \t\tif (map.containsKey(nums[i])) {\r\n    \t\t\tint index = map.get(nums[i]);\r\n    \t\t\tresult[0] = index+1 ;\r\n    \t\t\tresult[1] = i+1;\r\n    \t\t\tbreak;\r\n    \t\t} else {\r\n    \t\t\tmap.put(target - nums[i], i);\r\n    \t\t}\r\n    \t}\r\n     \r\n    \treturn result;  \r\n    }\r\n}","ruby":"# @param {Integer[]} nums\r\n# @param {Integer} target\r\n# @return {Integer[]}\r\ndef two_sum(nums, target)\r\n  ret = []\r\n  hash = Hash.new\r\n  nums.each_with_index do |val, idx|\r\n    if hash.has_key?(val)\r\n      ret[1] = idx+1\r\n      ret[0] = hash[val]+1\r\n      return ret\r\n    else\r\n      hash[target-val] = idx\r\n    end\r\n  end\r\nend","javascript":"/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nvar twoSum = function(nums, target) {\n    var ans = [];\n    var hash = {};\n    for (var i = 0; i < nums.length; i++) {\n        if (typeof hash[nums[i]] !== \"undefined\") {\n            ans[0] = hash[nums[i]];\n            ans[1] = i;\n        }\n        else {\n            hash[target - nums[i]] = i;\n        }\n    }\n    return ans;\n};","python":"class Solution:\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        num_hash = {}\n        for i,num in enumerate(nums):\n            if (target-num) in num_hash:\n                return [num_hash[target-num], i]\n            num_hash[num] = i\n        "}
{"python":"from collections import OrderedDict\n\nclass LRUCache:\n    def __init__(self, capacity):\n        \"\"\"\n        :type capacity: int\n        \"\"\"\n        self.capacity = capacity\n        self.cache = OrderedDict()\n        self.tm = 0\n\n    def get(self, key):\n        \"\"\"\n        :type key: int\n        :rtype: int\n        \"\"\"\n        if key in self.cache:\n            value = self.cache[key]\n            del self.cache[key]\n            self.cache[key] = value\n            return self.cache[key]\n        else:\n            return -1\n        \n\n    def put(self, key, value):\n        \"\"\"\n        :type key: int\n        :type value: int\n        :rtype: void\n        \"\"\"\n        # print(\"Put key {}:value {} into cache, len = {}\".format(key, value, len(self.cache)))\n        if key not in self.cache:\n            if len(self.cache) >= self.capacity:\n                self.cache.popitem(last=False)\n        else:\n            self.cache.pop(key, None)\n \n        self.cache[key] = value\n"}